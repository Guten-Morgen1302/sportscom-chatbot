{"file_contents":{"app.py":{"content":"from flask import Flask, request, jsonify, render_template_string\nfrom flask_cors import CORS\nimport re\nimport os\nfrom dotenv import load_dotenv\nimport google.generativeai as genai\nimport hashlib\nfrom collections import Counter\n\nload_dotenv()\n\napp = Flask(__name__)\nCORS(app)\n\n# Load system prompt\nwith open(\"system_prompt.txt\", \"r\", encoding=\"utf-8\") as f:\n    SYSTEM_PROMPT = f.read()\n\n# Load chat data\nwith open(\"processed_chunks.txt\", \"r\", encoding=\"utf-8\") as f:\n    chat_data = f.read()\n\n# Initialize Gemini\ngenai.configure(api_key=os.environ.get(\"GEMINI_API_KEY\"))\nmodel = genai.GenerativeModel('gemini-2.5-flash')\n\n# Split into chunks for easier searching\nchunks = [chunk.strip() for chunk in chat_data.split('\\n\\n') if chunk.strip()]\n\n# Create simple embeddings using TF-IDF like approach\ndef create_text_fingerprint(text):\n    \"\"\"Create a simple text fingerprint using word frequency and patterns\"\"\"\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    word_counts = Counter(words)\n    # Create a hash-based fingerprint\n    fingerprint = {}\n    for word, count in word_counts.most_common(50):  # Top 50 words\n        fingerprint[word] = count\n    return fingerprint\n\n# Pre-compute fingerprints for all chunks\nchunk_fingerprints = [create_text_fingerprint(chunk) for chunk in chunks]\n\ndef compute_similarity_score(fingerprint1, fingerprint2):\n    \"\"\"Compute similarity between two text fingerprints\"\"\"\n    common_words = set(fingerprint1.keys()).intersection(set(fingerprint2.keys()))\n    if not common_words:\n        return 0.0\n    \n    score = 0.0\n    total_weight = 0.0\n    \n    for word in common_words:\n        # Weight by frequency in both texts\n        weight = min(fingerprint1[word], fingerprint2[word])\n        score += weight\n        total_weight += weight\n    \n    # Normalize by total words in query\n    query_total = sum(fingerprint1.values())\n    return score / max(query_total, 1) if query_total > 0 else 0.0\n\ndef find_relevant_context(user_message):\n    \"\"\"\n    Find relevant context using improved semantic similarity\n    \"\"\"\n    user_fingerprint = create_text_fingerprint(user_message)\n    chunk_scores = []\n    \n    # Compute similarity scores for all chunks\n    for i, chunk_fingerprint in enumerate(chunk_fingerprints):\n        similarity = compute_similarity_score(user_fingerprint, chunk_fingerprint)\n        if similarity > 0.1:  # Minimum similarity threshold\n            chunk_scores.append((similarity, i, chunks[i]))\n    \n    # Sort by similarity score and return top matches\n    chunk_scores.sort(reverse=True, key=lambda x: x[0])\n    return [chunk for _, _, chunk in chunk_scores[:3]]\n\ndef validate_response_rules(response, user_message):\n    \"\"\"Validate response follows system prompt rules\"\"\"\n    user_lower = user_message.lower()\n    response_lower = response.lower()\n    \n    # Check event isolation rules\n    events = {'agility', 'spoorthi', 'marathon'}\n    user_event = None\n    for event in events:\n        if event in user_lower:\n            user_event = event\n            break\n    \n    if user_event:\n        other_events = events - {user_event}\n        for other_event in other_events:\n            if other_event in response_lower:\n                return False, f\"Response mentions {other_event} when user asked about {user_event}\"\n    \n    # Check length limit (800 chars unless \"detail\" requested, then 1200 chars max)\n    if \"detail\" in user_lower:\n        if len(response) > 1200:\n            return False, \"Response exceeds 1200 character limit for detailed responses\"\n    else:\n        if len(response) > 800:\n            return False, \"Response exceeds 800 character limit\"\n    \n    return True, \"Valid\"\n\ndef query_gemini_model(user_message, context=None):\n    \"\"\"\n    Query Gemini model with proper safety checks\n    \"\"\"\n    api_key = os.environ.get(\"GEMINI_API_KEY\")\n    if not api_key:\n        return generate_fallback_response(user_message, context)\n    \n    try:\n        # Construct prompt with system instructions and context\n        if context:\n            context_text = \"\\n\".join(context)\n            prompt = f\"\"\"\n{SYSTEM_PROMPT}\n\nContext from SportsCom chat history:\n{context_text}\n\nUser: {user_message}\n\nRespond as a SPIT SportsCom senior student in Hinglish, following the rules strictly. Keep it under 800 characters unless user says \"detail\".\n\"\"\"\n        else:\n            prompt = f\"\"\"\n{SYSTEM_PROMPT}\n\nUser: {user_message}\n\nRespond as a SPIT SportsCom senior student in Hinglish. If you don't know, say \"Ask this on sports update group\".\n\"\"\"\n\n        # Configure safety settings\n        safety_settings = [\n            {\"category\": \"HARM_CATEGORY_HARASSMENT\", \"threshold\": \"BLOCK_NONE\"},\n            {\"category\": \"HARM_CATEGORY_HATE_SPEECH\", \"threshold\": \"BLOCK_NONE\"},\n            {\"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\", \"threshold\": \"BLOCK_NONE\"},\n            {\"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\", \"threshold\": \"BLOCK_NONE\"}\n        ]\n        \n        # Generate response\n        response = model.generate_content(\n            prompt,\n            safety_settings=safety_settings,\n            generation_config=genai.GenerationConfig(\n                max_output_tokens=1000,\n                temperature=0.7,\n                top_k=40,\n                top_p=0.8,\n            )\n        )\n        \n        if response.text:\n            # Validate response follows rules\n            is_valid, validation_msg = validate_response_rules(response.text, user_message)\n            if is_valid:\n                return response.text\n            else:\n                print(f\"Response validation failed: {validation_msg}\")\n                return generate_fallback_response(user_message, context)\n        \n        return generate_fallback_response(user_message, context)\n        \n    except Exception as e:\n        print(f\"Error calling Gemini: {e}\")\n        return generate_fallback_response(user_message, context)\n\ndef generate_fallback_response(user_message, context):\n    \"\"\"\n    Generate fallback response when Gemini is not available\n    \"\"\"\n    user_message_lower = user_message.lower()\n    \n    # Basic rule-based responses based on system prompt\n    if any(word in user_message_lower for word in ['agility', 'cup']):\n        return \"Agility Cup open hai bro—apni team banao, mix branches/years chalega. November first week tentative hai. Final dates class groups pe aayenge.\"\n    \n    elif any(word in user_message_lower for word in ['spoorthi']):\n        return \"Spoorthi Feb-Mar mein hai. Team sports ke liye college team selection chahiye, chess/TT jaise solos jab announce honge tab.\"\n    \n    elif any(word in user_message_lower for word in ['committee', 'join', 'selection']):\n        return \"Committee selections after 10th October. Forms kal se float ho jayenge. Interview hogi but bakchodiyan bhi hongi, dw.\"\n    \n    elif any(word in user_message_lower for word in ['date', 'when', 'schedule']):\n        return \"Seniors will post the final dates on official class groups.\"\n    \n    elif any(word in user_message_lower for word in ['basketball']):\n        return \"Basketball trials early Oct. Venue: Wadia court.\"\n    \n    elif any(word in user_message_lower for word in ['cricket', 'football']):\n        return \"Cricket/Football trials tentatively 1st week Nov. Venue: Bhavan's ground (post-rains maintenance dependent).\"\n    \n    elif any(word in user_message_lower for word in ['badminton']):\n        return \"Badminton venue: ASC courts (online booking available).\"\n    \n    elif any(word in user_message_lower for word in ['chess']):\n        return \"FIDE Chess tournament bhi hai. Chess teams technical hai, practice groups banenge.\"\n    \n    elif any(word in user_message_lower for word in ['venue', 'where', 'court']):\n        return \"Basketball: Wadia court, Cricket/Football: Bhavan's ground, Badminton: ASC courts, TT/Carrom: Gymkhana.\"\n    \n    else:\n        return \"Ask this on sports update group.\"\n\n@app.route('/chat', methods=['POST'])\ndef chat():\n    try:\n        user_input = request.json.get(\"message\", \"\").strip()\n        \n        if not user_input:\n            return jsonify({\"response\": \"Kuch toh bolo yaar!\"})\n        \n        # Find relevant context\n        context = find_relevant_context(user_input)\n        \n        # Generate response\n        ai_response = query_gemini_model(user_input, context)\n        \n        return jsonify({\"response\": ai_response})\n        \n    except Exception as e:\n        print(f\"Error in chat endpoint: {e}\")\n        return jsonify({\"response\": \"Something went wrong. Ask this on sports update group.\"})\n\n@app.route('/')\ndef index():\n    try:\n        with open(\"static/index.html\", \"r\", encoding=\"utf-8\") as f:\n            html_content = f.read()\n        return html_content\n    except FileNotFoundError:\n        return jsonify({\"error\": \"Frontend not found\"}), 404\n\n@app.route('/health', methods=['GET'])\ndef health():\n    return jsonify({\"status\": \"ok\", \"message\": \"SPIT SportsCom Bot is running!\"})\n\nif __name__ == '__main__':\n    print(\"Starting SPIT SportsCom Bot...\")\n    app.run(debug=True, host='0.0.0.0', port=5000)","size_bytes":9079},"api/index.py":{"content":"from flask import Flask, request, jsonify\nfrom flask_cors import CORS\nimport re\nimport os\nfrom dotenv import load_dotenv\nimport google.generativeai as genai\nimport hashlib\nfrom collections import Counter\n\n# Load environment variables\nload_dotenv()\n\napp = Flask(__name__)\nCORS(app)\n\n# Load system prompt from root directory\ntry:\n    with open(\"../system_prompt.txt\", \"r\", encoding=\"utf-8\") as f:\n        SYSTEM_PROMPT = f.read()\nexcept FileNotFoundError:\n    with open(\"system_prompt.txt\", \"r\", encoding=\"utf-8\") as f:\n        SYSTEM_PROMPT = f.read()\n\n# Load chat data from root directory  \ntry:\n    with open(\"../processed_chunks.txt\", \"r\", encoding=\"utf-8\") as f:\n        chat_data = f.read()\nexcept FileNotFoundError:\n    with open(\"processed_chunks.txt\", \"r\", encoding=\"utf-8\") as f:\n        chat_data = f.read()\n\n# Initialize Gemini\napi_key = os.environ.get(\"GEMINI_API_KEY\")\nif api_key:\n    genai.configure(api_key=api_key)\n    model = genai.GenerativeModel('gemini-2.5-flash')\n\n# Split into chunks for easier searching\nchunks = [chunk.strip() for chunk in chat_data.split('\\n\\n') if chunk.strip()]\n\n# Create simple embeddings using TF-IDF like approach\ndef create_text_fingerprint(text):\n    \"\"\"Create a simple text fingerprint using word frequency and patterns\"\"\"\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    word_counts = Counter(words)\n    # Create a hash-based fingerprint\n    fingerprint = {}\n    for word, count in word_counts.most_common(50):  # Top 50 words\n        fingerprint[word] = count\n    return fingerprint\n\n# Pre-compute fingerprints for all chunks\nchunk_fingerprints = [create_text_fingerprint(chunk) for chunk in chunks]\n\ndef compute_similarity_score(fingerprint1, fingerprint2):\n    \"\"\"Compute similarity between two text fingerprints\"\"\"\n    common_words = set(fingerprint1.keys()).intersection(set(fingerprint2.keys()))\n    if not common_words:\n        return 0.0\n    \n    score = 0.0\n    total_weight = 0.0\n    \n    for word in common_words:\n        # Weight by frequency in both texts\n        weight = min(fingerprint1[word], fingerprint2[word])\n        score += weight\n        total_weight += weight\n    \n    # Normalize by total words in query\n    query_total = sum(fingerprint1.values())\n    return score / max(query_total, 1) if query_total > 0 else 0.0\n\ndef find_relevant_context(user_message):\n    \"\"\"Find relevant context using improved semantic similarity\"\"\"\n    user_fingerprint = create_text_fingerprint(user_message)\n    chunk_scores = []\n    \n    # Compute similarity scores for all chunks\n    for i, chunk_fingerprint in enumerate(chunk_fingerprints):\n        similarity = compute_similarity_score(user_fingerprint, chunk_fingerprint)\n        if similarity > 0.1:  # Minimum similarity threshold\n            chunk_scores.append((similarity, i, chunks[i]))\n    \n    # Sort by similarity score and return top matches\n    chunk_scores.sort(reverse=True, key=lambda x: x[0])\n    return [chunk for _, _, chunk in chunk_scores[:3]]\n\ndef validate_response_rules(response, user_message):\n    \"\"\"Validate response follows system prompt rules\"\"\"\n    user_lower = user_message.lower()\n    response_lower = response.lower()\n    \n    # Check event isolation rules\n    events = {'agility', 'spoorthi', 'marathon'}\n    user_event = None\n    for event in events:\n        if event in user_lower:\n            user_event = event\n            break\n    \n    if user_event:\n        other_events = events - {user_event}\n        for other_event in other_events:\n            if other_event in response_lower:\n                return False, f\"Response mentions {other_event} when user asked about {user_event}\"\n    \n    # Check length limit (800 chars unless \"detail\" requested, then 1200 chars max)\n    if \"detail\" in user_lower:\n        if len(response) > 1200:\n            return False, \"Response exceeds 1200 character limit for detailed responses\"\n    else:\n        if len(response) > 800:\n            return False, \"Response exceeds 800 character limit\"\n    \n    return True, \"Valid\"\n\ndef query_gemini_model(user_message, context=None):\n    \"\"\"Query Gemini model with proper safety checks\"\"\"\n    if not api_key:\n        return generate_fallback_response(user_message, context)\n    \n    try:\n        # Construct prompt with system instructions and context\n        if context:\n            context_text = \"\\n\".join(context)\n            prompt = f\"\"\"\n{SYSTEM_PROMPT}\n\nContext from SportsCom chat history:\n{context_text}\n\nUser: {user_message}\n\nRespond as a SPIT SportsCom senior student in Hinglish, following the rules strictly. Keep it under 800 characters unless user says \"detail\".\n\"\"\"\n        else:\n            prompt = f\"\"\"\n{SYSTEM_PROMPT}\n\nUser: {user_message}\n\nRespond as a SPIT SportsCom senior student in Hinglish. If you don't know, say \"Ask this on sports update group\".\n\"\"\"\n\n        # Configure safety settings\n        safety_settings = [\n            {\"category\": \"HARM_CATEGORY_HARASSMENT\", \"threshold\": \"BLOCK_NONE\"},\n            {\"category\": \"HARM_CATEGORY_HATE_SPEECH\", \"threshold\": \"BLOCK_NONE\"},\n            {\"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\", \"threshold\": \"BLOCK_NONE\"},\n            {\"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\", \"threshold\": \"BLOCK_NONE\"}\n        ]\n        \n        # Generate response\n        response = model.generate_content(\n            prompt,\n            safety_settings=safety_settings,\n            generation_config=genai.GenerationConfig(\n                max_output_tokens=1000,\n                temperature=0.7,\n                top_k=40,\n                top_p=0.8,\n            )\n        )\n        \n        if response.text:\n            # Validate response follows rules\n            is_valid, validation_msg = validate_response_rules(response.text, user_message)\n            if is_valid:\n                return response.text\n            else:\n                print(f\"Response validation failed: {validation_msg}\")\n                return generate_fallback_response(user_message, context)\n        \n        return generate_fallback_response(user_message, context)\n        \n    except Exception as e:\n        print(f\"Error calling Gemini: {e}\")\n        return generate_fallback_response(user_message, context)\n\ndef generate_fallback_response(user_message, context):\n    \"\"\"Generate fallback response when Gemini is not available\"\"\"\n    user_message_lower = user_message.lower()\n    \n    # Basic rule-based responses based on system prompt\n    if any(word in user_message_lower for word in ['agility', 'cup']):\n        return \"Agility Cup open hai bro—apni team banao, mix branches/years chalega. November first week tentative hai. Final dates class groups pe aayenge.\"\n    \n    elif any(word in user_message_lower for word in ['spoorthi']):\n        return \"Spoorthi Feb-Mar mein hai. Team sports ke liye college team selection chahiye, chess/TT jaise solos jab announce honge tab.\"\n    \n    elif any(word in user_message_lower for word in ['committee', 'join', 'selection']):\n        return \"Committee selections after 10th October. Forms kal se float ho jayenge. Interview hogi but bakchodiyan bhi hongi, dw.\"\n    \n    elif any(word in user_message_lower for word in ['date', 'when', 'schedule']):\n        return \"Seniors will post the final dates on official class groups.\"\n    \n    elif any(word in user_message_lower for word in ['basketball']):\n        return \"Basketball trials early Oct. Venue: Wadia court.\"\n    \n    elif any(word in user_message_lower for word in ['cricket', 'football']):\n        return \"Cricket/Football trials tentatively 1st week Nov. Venue: Bhavan's ground (post-rains maintenance dependent).\"\n    \n    elif any(word in user_message_lower for word in ['badminton']):\n        return \"Badminton venue: ASC courts (online booking available).\"\n    \n    elif any(word in user_message_lower for word in ['chess']):\n        return \"FIDE Chess tournament bhi hai. Chess teams technical hai, practice groups banenge.\"\n    \n    elif any(word in user_message_lower for word in ['venue', 'where', 'court']):\n        return \"Basketball: Wadia court, Cricket/Football: Bhavan's ground, Badminton: ASC courts, TT/Carrom: Gymkhana.\"\n    \n    else:\n        return \"Ask this on sports update group.\"\n\n# Serve the frontend\n@app.route('/')\ndef index():\n    \"\"\"Serve the chat interface\"\"\"\n    html_content = \"\"\"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>SPIT SportsCom Bot</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n        \n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            height: 100vh;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n        \n        .chat-container {\n            background: white;\n            border-radius: 15px;\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n            width: 90%;\n            max-width: 600px;\n            height: 80vh;\n            display: flex;\n            flex-direction: column;\n            overflow: hidden;\n        }\n        \n        .chat-header {\n            background: linear-gradient(135deg, #ff6b6b, #ee5a24);\n            color: white;\n            padding: 20px;\n            text-align: center;\n        }\n        \n        .chat-header h1 {\n            font-size: 24px;\n            margin-bottom: 5px;\n        }\n        \n        .chat-header p {\n            font-size: 14px;\n            opacity: 0.9;\n        }\n        \n        .chat-messages {\n            flex: 1;\n            padding: 20px;\n            overflow-y: auto;\n            background-color: #f8f9fa;\n        }\n        \n        .message {\n            margin-bottom: 15px;\n            padding: 12px 16px;\n            border-radius: 20px;\n            max-width: 80%;\n            word-wrap: break-word;\n            animation: fadeIn 0.3s ease-in;\n        }\n        \n        .user-message {\n            background: #007bff;\n            color: white;\n            margin-left: auto;\n            text-align: right;\n        }\n        \n        .bot-message {\n            background: white;\n            color: #333;\n            border: 2px solid #e9ecef;\n            margin-right: auto;\n        }\n        \n        .chat-input {\n            padding: 20px;\n            background: white;\n            border-top: 1px solid #e9ecef;\n            display: flex;\n            gap: 10px;\n        }\n        \n        .chat-input input {\n            flex: 1;\n            padding: 12px 16px;\n            border: 2px solid #e9ecef;\n            border-radius: 25px;\n            outline: none;\n            font-size: 16px;\n        }\n        \n        .chat-input input:focus {\n            border-color: #007bff;\n        }\n        \n        .chat-input button {\n            background: #007bff;\n            color: white;\n            border: none;\n            padding: 12px 20px;\n            border-radius: 25px;\n            cursor: pointer;\n            font-size: 16px;\n            transition: background 0.3s;\n        }\n        \n        .chat-input button:hover {\n            background: #0056b3;\n        }\n        \n        .chat-input button:disabled {\n            background: #6c757d;\n            cursor: not-allowed;\n        }\n        \n        @keyframes fadeIn {\n            from { opacity: 0; transform: translateY(10px); }\n            to { opacity: 1; transform: translateY(0); }\n        }\n        \n        .typing-indicator {\n            display: none;\n            padding: 12px 16px;\n            border-radius: 20px;\n            background: white;\n            border: 2px solid #e9ecef;\n            margin-right: auto;\n            max-width: 80%;\n            margin-bottom: 15px;\n        }\n        \n        .typing-dots {\n            display: flex;\n            gap: 4px;\n        }\n        \n        .typing-dots span {\n            width: 8px;\n            height: 8px;\n            background: #999;\n            border-radius: 50%;\n            animation: typing 1.4s infinite ease-in-out;\n        }\n        \n        .typing-dots span:nth-child(1) { animation-delay: -0.32s; }\n        .typing-dots span:nth-child(2) { animation-delay: -0.16s; }\n        \n        @keyframes typing {\n            0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }\n            40% { transform: scale(1); opacity: 1; }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"chat-container\">\n        <div class=\"chat-header\">\n            <h1>🏏 SPIT SportsCom Bot</h1>\n            <p>Tumhara senior sports committee member - Ask anything about SPIT sports!</p>\n        </div>\n        \n        <div class=\"chat-messages\" id=\"chatMessages\">\n            <div class=\"message bot-message\">\n                Hey! Main tumhara SportsCom senior hun. Kuch bhi poocho sports events, committees, trials ke baare mein. Agility Cup, Spoorthi, trials - sab kuch jaanta hun! 🔥\n            </div>\n        </div>\n        \n        <div class=\"typing-indicator\" id=\"typingIndicator\">\n            <div class=\"typing-dots\">\n                <span></span>\n                <span></span>\n                <span></span>\n            </div>\n        </div>\n        \n        <div class=\"chat-input\">\n            <input type=\"text\" id=\"messageInput\" placeholder=\"Type your message here... (in Hinglish!)\" />\n            <button onclick=\"sendMessage()\" id=\"sendButton\">Send</button>\n        </div>\n    </div>\n\n    <script>\n        const chatMessages = document.getElementById('chatMessages');\n        const messageInput = document.getElementById('messageInput');\n        const sendButton = document.getElementById('sendButton');\n        const typingIndicator = document.getElementById('typingIndicator');\n\n        messageInput.addEventListener('keypress', function(e) {\n            if (e.key === 'Enter') {\n                sendMessage();\n            }\n        });\n\n        function addMessage(message, isUser) {\n            const messageDiv = document.createElement('div');\n            messageDiv.className = `message ${isUser ? 'user-message' : 'bot-message'}`;\n            messageDiv.textContent = message;\n            chatMessages.appendChild(messageDiv);\n            chatMessages.scrollTop = chatMessages.scrollHeight;\n        }\n\n        function showTyping() {\n            typingIndicator.style.display = 'block';\n            chatMessages.scrollTop = chatMessages.scrollHeight;\n        }\n\n        function hideTyping() {\n            typingIndicator.style.display = 'none';\n        }\n\n        async function sendMessage() {\n            const message = messageInput.value.trim();\n            if (!message) return;\n\n            // Disable input while processing\n            messageInput.disabled = true;\n            sendButton.disabled = true;\n\n            // Add user message\n            addMessage(message, true);\n            messageInput.value = '';\n\n            // Show typing indicator\n            showTyping();\n\n            try {\n                const response = await fetch('/chat', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({ message: message }),\n                });\n\n                const data = await response.json();\n                \n                // Hide typing indicator\n                hideTyping();\n                \n                // Add bot response\n                addMessage(data.response || 'Something went wrong!', false);\n\n            } catch (error) {\n                hideTyping();\n                addMessage('Sorry, something went wrong! Ask this on sports update group.', false);\n                console.error('Error:', error);\n            }\n\n            // Re-enable input\n            messageInput.disabled = false;\n            sendButton.disabled = false;\n            messageInput.focus();\n        }\n\n        // Focus on input when page loads\n        messageInput.focus();\n    </script>\n</body>\n</html>\"\"\"\n    return html_content\n\n@app.route('/chat', methods=['POST'])\ndef chat():\n    try:\n        user_input = request.json.get(\"message\", \"\").strip()\n        \n        if not user_input:\n            return jsonify({\"response\": \"Kuch toh bolo yaar!\"})\n        \n        # Find relevant context\n        context = find_relevant_context(user_input)\n        \n        # Generate response\n        ai_response = query_gemini_model(user_input, context)\n        \n        return jsonify({\"response\": ai_response})\n        \n    except Exception as e:\n        print(f\"Error in chat endpoint: {e}\")\n        return jsonify({\"response\": \"Something went wrong. Ask this on sports update group.\"})\n\n@app.route('/health', methods=['GET'])\ndef health():\n    return jsonify({\"status\": \"ok\", \"message\": \"SPIT SportsCom Bot is running!\"})\n\n# For local development\nif __name__ == '__main__':\n    print(\"Starting SPIT SportsCom Bot...\")\n    app.run(debug=True, host='0.0.0.0', port=5000)","size_bytes":17062}},"version":1}